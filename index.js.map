{"version":3,"file":"index.js","sources":["../src/assets/img/sprite.svg","../src/ts/menu.tsx","../src/ts/board-header.tsx","../src/ts/score-board.tsx","../src/ts/board.tsx","../src/ts/main.tsx"],"sourcesContent":["export default \"__VITE_ASSET__NKSZpSDR__\"","import React, { useState } from 'react'\r\nimport sprite from '../assets/img/sprite.svg'\r\n\r\n\r\ninterface MenuProps  {\r\n    onChange: (param: boolean) => void\r\n    onClick: (param: boolean) => void\r\n}\r\ninterface MarkSelectorProps {\r\n    onChange: (param: boolean) => void\r\n}\r\ninterface EnemySelectorProps {\r\n    onClick: (param: boolean) => void\r\n}\r\n\r\n    \r\nexport default function Menu(props: MenuProps): React.ReactElement {\r\n        return (\r\n            <div className='menu-container'>\r\n                <Logo />\r\n                <MarkSelector\r\n                    onChange = {(i) => {props.onChange(i)}}\r\n                />\r\n                <EnemySelector\r\n                    onClick = {(i) => {props.onClick(i)}}\r\n                />\r\n            </div>\r\n        )\r\n}\r\n\r\nfunction Logo() {\r\n    return (\r\n        <div className=\"logo-container\">\r\n            <svg width='72' height='32'>\r\n                <use href={ `${sprite}#logo` } />\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MarkSelector(props: MarkSelectorProps) {\r\nconst [checked, setChecked] = useState(true)\r\n\r\n    return (\r\n        <div className=\"mark-selector__container\">\r\n            <h2 className=\"mark-selector__title\">pick players 1's mark</h2>\r\n            <input\r\n                type=\"checkbox\"\r\n                className=\"mark-selector__checkbox visually-hidden\"\r\n                id='mark-selector'\r\n                checked={!checked}\r\n                onChange={() => { props.onChange(!checked);  setChecked(!checked) }}\r\n            />\r\n            <label className=\"mark-selector__label\" htmlFor='mark-selector'>\r\n                <div className=\"mark-selector__selected-div\"></div>\r\n                <svg className='mark-selector__x-icon' width='32' height='32'>\r\n                    <use href={`${sprite}#icon-x`}></use>\r\n                </svg>\r\n                <svg className='mark-selector__o-icon' width='32' height='32'>\r\n                    <use href={`${sprite}#icon-o`}></use>\r\n                </svg>\r\n            </label>\r\n            <p className=\"mark-selector__notice\">remember: x goes firt</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction EnemySelector(props: EnemySelectorProps) {\r\n    return (\r\n        <div className=\"enemy-selector__container\">\r\n            <button\r\n                className=\"enemy-selector__cpu-btn\"\r\n                type='button'\r\n                onClick={() => props.onClick(false)}\r\n            >\r\n                new game (vs cpu)\r\n            </button>\r\n            <button\r\n                className=\"enemy-selector__multiplayer-btn\"\r\n                type='button'\r\n                onClick={() => props.onClick(true)}\r\n            >\r\n                new game (vs player)\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import sprite from '../assets/img/sprite.svg'\r\n\r\n\r\ntype HeaderProps = {\r\n    isXStep: boolean\r\n    onClick: () => void\r\n}\r\ntype StepSVGProps = {\r\n    isXStep: boolean\r\n}\r\n\r\n\r\nexport default function Header(props: HeaderProps) {\r\n    return (\r\n        <div className=\"board__header\">\r\n            <svg width='72' height='32'>\r\n                <use href={ `${sprite}#logo` } />\r\n            </svg>\r\n            <div className=\"header__turn-container\">\r\n                <StepSVG\r\n                    isXStep={props.isXStep}\r\n                />\r\n                <p className=\"header__turn-para\">turn</p>\r\n            </div>\r\n            <button className=\"header__reset-btn\" type='button' onClick={props.onClick}>\r\n                <svg className='header-reset-icon' width='20' height='20'>\r\n                    <use href={`${sprite}#icon-restart`}></use>\r\n                </svg>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction StepSVG(props: StepSVGProps) {\r\n    if (props.isXStep) {\r\n        return (\r\n            <svg className='header__x-icon' width='20' height='20'>\r\n                <use href={`${sprite}#icon-x`}></use>\r\n            </svg>\r\n        )\r\n    }\r\n    return (\r\n        <svg className='header__o-icon' width='20' height='20'>\r\n            <use href={`${sprite}#icon-o`}></use>\r\n        </svg>\r\n    )\r\n}\r\n","// interface ScoreBoardProps {\r\n\r\n// }\r\n\r\ninterface ScoreBoardProps {\r\n    isMultiplayer: boolean\r\n    isXSelected: boolean\r\n    scores: {\r\n        xScore: number\r\n        oScore: number\r\n        ties: number\r\n    }\r\n}\r\n\r\nexport default function ScoreBoard(props: ScoreBoardProps) {\r\n    let xTitle: string | undefined\r\n    let oTitle: string | undefined\r\n    if (props.isMultiplayer) {\r\n        if (props.isXSelected) {\r\n            xTitle = 'p1'\r\n            oTitle = 'p2'\r\n        } else {\r\n            xTitle = 'p2'\r\n            oTitle = 'p1'\r\n        }\r\n    } else {\r\n        if (props.isXSelected) {\r\n            xTitle = 'you'\r\n            oTitle = 'cpu'\r\n        } else {\r\n            xTitle = 'you'\r\n            oTitle = 'cpu'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"score-board__content-container\">\r\n            <div className=\"score-board__x-score-container score-board__score-container\">\r\n                <h3 className=\"score-board__title\">x ({xTitle})</h3>\r\n                <p className=\"score-board__scores\">{props.scores.xScore}</p>\r\n            </div>\r\n            <div className=\"score-board__ties-container score-board__score-container\">\r\n                <h3 className=\"score-board__title\">ties</h3>\r\n                <p className=\"score-board__scores\">{props.scores.ties}</p>\r\n            </div>\r\n            <div className=\"score-board__o-score-container score-board__score-container\">\r\n                <h3 className=\"score-board__title\">o ({oTitle})</h3>\r\n                <p className=\"score-board__scores\">{props.scores.oScore}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { MouseEventHandler } from 'react'\r\nimport sprite from '../assets/img/sprite.svg'\r\nimport Header from './board-header'\r\nimport ScoreBoard from './score-board'\r\n\r\n\r\ninterface BoardProps {\r\n    resetGame: () => void\r\n    isMultiplayer: boolean\r\n    isXSelected: boolean\r\n}\r\ninterface BoardState {\r\n    field: {\r\n        squares: JSX.Element[] | null[]\r\n        marks: string[] | null[]\r\n    }\r\n    scores: {\r\n        xScore: number\r\n        oScore: number\r\n        ties: number\r\n    }\r\n    isXStep: boolean\r\n    isRestart: boolean\r\n}\r\ninterface GameFieldProps  {\r\n    squares: JSX.Element[] | null[]\r\n    marks : string[] | null[]\r\n    isXStep: boolean\r\n    onClick: (param: number) => void\r\n}\r\ntype SquareProps = {\r\n    value: React.ReactElement | null\r\n    marks: string[] | null[]\r\n    id: number\r\n    isXStep: boolean\r\n    onClick: MouseEventHandler\r\n}\r\n\r\nexport default class Board extends React.Component<BoardProps, BoardState> {\r\n    state: BoardState\r\n    readonly iconX: JSX.Element\r\n    readonly iconO: JSX.Element\r\n\r\n    constructor(props: BoardProps) {\r\n        super(props)\r\n        this.iconX = (\r\n            <svg className='board__x-icon' width='64' height='64'>\r\n                <use href={`${sprite}#icon-x`}></use>\r\n            </svg>\r\n        )\r\n        this.iconO = (\r\n            <svg className='board__o-icon' width='64' height='64'>\r\n                <use href={`${sprite}#icon-o`}></use>\r\n            </svg>\r\n        )\r\n        this.state = {\r\n            field: {\r\n                squares: Array(9).fill(null),\r\n                marks: Array(9).fill(null),\r\n            },\r\n            scores: {\r\n                xScore: 0,\r\n                oScore: 0,\r\n                ties: 0\r\n            },\r\n            isXStep: true,\r\n            isRestart: false\r\n        }\r\n    }\r\n\r\n\r\n    handleFieldClick(i: number): void {\r\n        const { squares, marks } = this.state.field\r\n        if (squares[i] || calculateWinner(this.state.field.marks)) {\r\n            return\r\n        }\r\n        if (this.state.isXStep) {\r\n            squares[i] = this.iconX\r\n            marks[i] = 'x'\r\n        } else {\r\n            squares[i] = this.iconO\r\n            marks[i] = 'o'\r\n        }\r\n            \r\n        this.setState({\r\n            field: {\r\n                squares: squares,\r\n                marks: marks\r\n            },\r\n            isXStep: !this.state.isXStep\r\n        })\r\n    }\r\n\r\n    restartClickHandler() {\r\n        this.setState({\r\n            isRestart: true\r\n        })\r\n    }\r\n\r\n    nextRoundHandler(): void {\r\n        const winner = calculateWinner(this.state.field.marks)\r\n        let { xScore, oScore, ties } = this.state.scores\r\n\r\n        if (winner) {\r\n            winner === 'tie' ? ties += 1 :\r\n                winner[0] === 'x' ? xScore += 1 :\r\n                    winner[0] === 'o' ? oScore += 1 : null\r\n        }\r\n\r\n        this.setState({\r\n            field: {\r\n                squares: Array(9).fill(null),\r\n                marks: Array(9).fill(null)\r\n            },\r\n            isXStep: true,\r\n            scores: {\r\n                xScore: xScore,\r\n                oScore: oScore,\r\n                ties: ties\r\n            }\r\n        })\r\n    }\r\n\r\n    restartGame() {\r\n        this.setState({\r\n            field: {\r\n                squares: Array(9).fill(null),\r\n                marks: Array(9).fill(null),\r\n            },\r\n            scores: {\r\n                xScore: 0,\r\n                oScore: 0,\r\n                ties: 0\r\n            },\r\n            isXStep: true,\r\n            isRestart: false\r\n        })\r\n        this.props.resetGame()\r\n    }\r\n\r\n    onRoundEnd(winner: [string, number, number, number] | string | null): JSX.Element | null {\r\n\r\n        if (winner) {\r\n            let title: JSX.Element | null = null\r\n            let para: JSX.Element | null = null\r\n\r\n            if (winner === 'tie') {\r\n                title = (<h2 className=\"result__title_tie\">round tied</h2>)\r\n            } else if (winner[0] === \"x\") {\r\n                title = (<h2 className=\"result__title_x-win\">{this.iconX} takes the round</h2>)\r\n                para = <p className=\"result__winner-para\">player 1 wins!</p>\r\n            } else if (winner[0] === \"o\") {\r\n                title = (<h2 className=\"result__title_o-win\">{this.iconO}takes the round</h2>)\r\n                para = (<p className=\"result__winner-para\">player 2 wins!</p>)\r\n            }\r\n\r\n                    \r\n            return (\r\n                <div className=\"board__result-backdrop\">\r\n                    <div className=\"result__container\">\r\n                        {para}\r\n                        {title}\r\n                        <div className=\"result__btns-wrapper\">\r\n                            <button className=\"result__quit-btn\" type='button'onClick={() => this.restartClickHandler()}>quit</button>\r\n                            <button className=\"result__next-btn\" type='button' onClick={ () => this.nextRoundHandler() }>next round</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return null\r\n    }\r\n\r\n\r\n    render() {\r\n        const winner: JSX.Element | null = calculateWinner(this.state.field.marks) ?\r\n            this.onRoundEnd(calculateWinner(this.state.field.marks)) :\r\n            null\r\n        const restartModal = !this.state.isRestart ? null :\r\n            (\r\n               <div className=\"board__restart-backdrop\">\r\n                    <div className=\"restart__container\">\r\n                        <h2 className=\"restart__title\">restart game?</h2>\r\n                        <div className=\"restart__btns-wrapper\">\r\n                            <button className=\"restart__no-btn\" type='button' onClick={() => {this.setState({isRestart: false})}}>no, cancel</button>\r\n                            <button className=\"restart__yes-btn\" type='button' onClick={() => {this.restartGame()}}>yes, restart</button>\r\n                        </div>\r\n                    </div>\r\n                </div> \r\n            )\r\n        \r\n        return (\r\n            <div className=\"board-container\">\r\n                <Header\r\n                    isXStep={this.state.isXStep}\r\n                    onClick={() => this.restartClickHandler()}\r\n                />\r\n                <GameField\r\n                    squares={this.state.field.squares}\r\n                    marks={this.state.field.marks}\r\n                    onClick={(i) => this.handleFieldClick(i)}\r\n                    isXStep={this.state.isXStep}\r\n                />\r\n                <ScoreBoard\r\n                    isMultiplayer={this.props.isMultiplayer}\r\n                    isXSelected={this.props.isXSelected}\r\n                    scores={this.state.scores}\r\n                />\r\n                {winner}\r\n                {restartModal}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass GameField extends React.Component<GameFieldProps> {\r\n\r\n    constructor(props: GameFieldProps) {\r\n        super(props)\r\n    }\r\n\r\n    renderSquare(i: number): React.ReactElement {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[i]}\r\n                marks={this.props.marks}\r\n                id={i}\r\n                onClick={() => this.props.onClick(i)}\r\n                isXStep={this.props.isXStep}\r\n            />\r\n\r\n        )\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"board__game-field\">\r\n                {this.renderSquare(0)}\r\n                {this.renderSquare(1)}\r\n                {this.renderSquare(2)}\r\n                {this.renderSquare(3)}\r\n                {this.renderSquare(4)}\r\n                {this.renderSquare(5)}\r\n                {this.renderSquare(6)}\r\n                {this.renderSquare(7)}\r\n                {this.renderSquare(8)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nfunction Square(props: SquareProps): JSX.Element {\r\n    let hoverIcon: JSX.Element | null = null\r\n    const winner = calculateWinner(props.marks)\r\n\r\n    if (!props.value) {\r\n        if (props.isXStep) {\r\n            hoverIcon = (\r\n                <svg className='board__icon-outline' width='64' height='64'>\r\n                    <use href={`${sprite}#icon-x-outline`}></use>\r\n                </svg>\r\n            )\r\n        } else {\r\n            hoverIcon = (\r\n                <svg className='board__icon-outline' width='64' height='64'>\r\n                    <use href={`${sprite}#icon-o-outline`}></use>\r\n                </svg>\r\n            )\r\n        }\r\n    }\r\n    if (winner && winner !== 'tie' && (winner[1] === props.id || winner[2] === props.id || winner[3] === props.id)) {\r\n        const winnerClass: string = winner[0] === 'x' ?\r\n            'board__square-btn_x-win' :\r\n            'board__square-btn_o-win'\r\n        \r\n        return (\r\n            <button className={`board__square-btn ${winnerClass}`}>\r\n                {props.value}\r\n                {hoverIcon}\r\n            </button>\r\n        )\r\n    }\r\n    return (\r\n        <button className='board__square-btn' onClick={props.onClick}>\r\n            {props.value}\r\n            {hoverIcon}\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction calculateWinner(marks: string[] | null[]): [string, number, number, number] | string | null {\r\n    const winState = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n    for (const line of winState) {\r\n        const [a, b, c] = line\r\n        if (marks[a] && marks[a] === marks[b] && marks[a] === marks[c]) {\r\n            return [ marks[a]!, a, b, c ]\r\n        }\r\n    }\r\n    if (marks.every(mark => mark)) {\r\n        return 'tie'\r\n    }\r\n    return null\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport '../styles/index.scss'\r\nimport Menu from './menu'\r\nimport Board from './board'\r\n\r\n\r\ntype GameState = {\r\n    isXSelected: boolean\r\n    isMultiplayer: boolean | null\r\n}\r\n\r\nexport class Game extends React.Component<object, GameState> {\r\n    state: GameState\r\n    \r\n\r\n    constructor(props: object) {\r\n        super(props)\r\n        this.state = {\r\n            isXSelected: true,\r\n            isMultiplayer: null\r\n        }\r\n    }\r\n\r\n    handleEnemySelect(i: boolean) {\r\n        this.setState({\r\n            isMultiplayer: i\r\n        })\r\n    }\r\n\r\n    handleMarkChange(i: boolean): void {\r\n        this.setState({\r\n            isXSelected: i\r\n        })\r\n    }\r\n    handleReset() {\r\n        this.setState({\r\n            isXSelected: true,\r\n            isMultiplayer: null\r\n        })\r\n    }\r\n\r\n    render(): React.ReactElement | null {\r\n        if (this.state.isMultiplayer !== true) {\r\n            return (\r\n                <Menu\r\n                    onChange={(i) => { this.handleMarkChange(i) }}\r\n                    onClick={(i) => { this.handleEnemySelect(i) }}\r\n                />\r\n            )\r\n        }\r\n        return (\r\n            <Board\r\n                resetGame={() => { this.handleReset() }}\r\n                isMultiplayer={this.state.isMultiplayer}\r\n                isXSelected={this.state.isXSelected}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.querySelector('.game')!)\r\nroot.render(<Game />)"],"names":["sprite","Menu","props","jsxs","jsx","Logo","MarkSelector","i","EnemySelector","checked","setChecked","useState","Header","StepSVG","ScoreBoard","xTitle","oTitle","Board","React","__publicField","squares","marks","calculateWinner","winner","xScore","oScore","ties","title","para","restartModal","GameField","Square","hoverIcon","winnerClass","winState","line","a","b","c","mark","Game","root","ReactDOM"],"mappings":"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"}